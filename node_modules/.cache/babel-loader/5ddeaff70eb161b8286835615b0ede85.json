{"ast":null,"code":"var _jsxFileName = \"/home/ahmadg/Desktop/chat-challenge/src/App.js\";\nimport React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isConnected: false,\n      id: null,\n      userList: [],\n      message_from_server: \"\",\n      inputResult: \"\",\n      chat: []\n    };\n    this.socket = null;\n\n    this.handleChange = e => {\n      this.setState({\n        inputResult: e.target.value\n      });\n    };\n\n    this.addEmoji = e => {\n      let sym = e.unified.split(\"-\");\n      let codesArray = [];\n      sym.forEach(el => codesArray.push(\"0x\" + el));\n      let emoji = String.fromCodePoint(...codesArray);\n      this.setState({\n        inputResult: this.state.inputResult + emoji\n      });\n    };\n  }\n\n  componentWillMount() {\n    this.socket = io(\"https://codi-server.herokuapp.com\");\n    this.socket.on(\"connect\", () => {\n      this.setState({\n        isConnected: true\n      });\n    });\n    this.socket.on(\"disconnect\", () => {\n      this.setState({\n        isConnected: false\n      });\n    });\n    this.socket.on(\"youare\", answer => {\n      this.setState({\n        id: answer.id\n      });\n    });\n    this.socket.on(\"peeps\", data => {\n      this.setState({\n        userList: data\n      });\n    });\n    this.socket.on(\"new connection\", NewUser => {\n      console.log(\"new connection\", NewUser);\n      const users = [...this.state.userList, NewUser];\n      this.setState({\n        userList: users\n      });\n    });\n    this.socket.on(\"new disconnection\", DisconnectUser => {\n      console.log(\"new disconnection\", DisconnectUser);\n      const filteredUsers = this.state.userList.filter(function (item) {\n        return item !== DisconnectUser;\n      });\n      this.setState({\n        userList: filteredUsers\n      });\n    });\n    /** this will be useful way, way later **/\n\n    this.socket.on(\"room\", old_messages => {\n      this.setState({\n        chat: old_messages\n      });\n      console.log(old_messages);\n    });\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n    this.socket = null;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"status: \", this.state.isConnected ? \"connected\" : \"disconnected\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"id: \", this.state.id), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.socket.emit(\"whoami\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Who am I?\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        flex: \"30%\",\n        marginLeft: \"50px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, \"userList:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, this.state.userList.map(user => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, user))), \"userNumber:\", this.state.userList.length), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, this.state.chat.map(user => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, user.name, \"->\", user.text))))), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Picker, {\n      onSelect: this.addEmoji,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, \"message to server :\", /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.inputResult,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.socket.emit(\"message\", {\n          id: this.state.id,\n          name: \"test\",\n          text: this.state.inputResult\n        });\n        this.setState({\n          inputResult: \"\"\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"send\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ahmadg/Desktop/chat-challenge/src/App.js"],"names":["React","Component","io","Picker","App","state","isConnected","id","userList","message_from_server","inputResult","chat","socket","handleChange","e","setState","target","value","addEmoji","sym","unified","split","codesArray","forEach","el","push","emoji","String","fromCodePoint","componentWillMount","on","answer","data","NewUser","console","log","users","DisconnectUser","filteredUsers","filter","item","old_messages","componentWillUnmount","close","handleSubmit","event","preventDefault","render","emit","display","flex","marginLeft","map","user","length","name","text"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\n\nclass App extends Component {\n  state = {\n    isConnected: false,\n    id: null,\n    userList: [],\n    message_from_server: \"\",\n    inputResult: \"\",\n    chat: []\n  };\n  socket = null;\n\n  handleChange = e => {\n    this.setState({ inputResult: e.target.value });\n  };\n  componentWillMount() {\n    this.socket = io(\"https://codi-server.herokuapp.com\");\n\n    this.socket.on(\"connect\", () => {\n      this.setState({ isConnected: true });\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      this.setState({ isConnected: false });\n    });\n    this.socket.on(\"youare\", answer => {\n      this.setState({ id: answer.id });\n    });\n    this.socket.on(\"peeps\", data => {\n      this.setState({ userList: data });\n    });\n    this.socket.on(\"new connection\", NewUser => {\n      console.log(\"new connection\", NewUser);\n      const users = [...this.state.userList, NewUser];\n      this.setState({ userList: users });\n    });\n    this.socket.on(\"new disconnection\", DisconnectUser => {\n      console.log(\"new disconnection\", DisconnectUser);\n      const filteredUsers = this.state.userList.filter(function(item) {\n        return item !== DisconnectUser;\n      });\n      this.setState({ userList: filteredUsers });\n    });\n\n    /** this will be useful way, way later **/\n    this.socket.on(\"room\", old_messages => {\n      this.setState({ chat: old_messages });\n      console.log(old_messages);\n    });\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n    this.socket = null;\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n  addEmoji = e => {\n    let sym = e.unified.split(\"-\");\n    let codesArray = [];\n    sym.forEach(el => codesArray.push(\"0x\" + el));\n    let emoji = String.fromCodePoint(...codesArray);\n    this.setState({\n      inputResult: this.state.inputResult + emoji\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          status: {this.state.isConnected ? \"connected\" : \"disconnected\"}\n        </div>\n        <div>id: {this.state.id}</div>\n        <button onClick={() => this.socket.emit(\"whoami\")}>Who am I?</button>\n        <div style={{ display: \"flex\" }}>\n          <div style={{ flex: \"30%\", marginLeft: \"50px\" }}>\n            userList:\n            <ul>\n              {this.state.userList.map(user => (\n                <li>{user}</li>\n              ))}\n            </ul>\n            userNumber:{this.state.userList.length}\n          </div>\n          <div>\n            <ul>\n              {this.state.chat.map(user => (\n                <li>\n                  {user.name}->{user.text}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n        <span>\n          <Picker onSelect={this.addEmoji} />\n        </span>\n        <form onSubmit={this.handleSubmit}>\n          message to server :\n          <input\n            value={this.state.inputResult}\n            onChange={this.handleChange}\n          ></input>\n          <button\n            onClick={() => {\n              this.socket.emit(\"message\", {\n                id: this.state.id,\n                name: \"test\",\n                text: this.state.inputResult\n              });\n\n              this.setState({ inputResult: \"\" });\n            }}\n          >\n            send\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}